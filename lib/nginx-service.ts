/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
import * as cdk8s from 'cdk8s';
import * as constructs from 'constructs';
import * as kplus from 'cdk8s-plus-24';

import { KubeNamespace, KubeServiceAccount } from '../imports/k8s'; // Please note the file of ../imports/k8s.ts is generated by the command of "cdk8s import k8s  -l typescript"
import { LabelSelector } from 'cdk8s-plus-24';

export interface NginxServiceProps {
  iamRoleForK8sSaArn: string;
  nameSpace: string;
  ingressName: string;
  serviceAccountName: string;
}

export class NginxService extends cdk8s.Chart {
  constructor(
    scope: constructs.Construct,
    id: string,
    props: NginxServiceProps
  ) {
    super(scope, id);

    const namespace = new KubeNamespace(this, props.nameSpace, {
      metadata: { name: props.nameSpace }
    });

    // Create K8S Service Account associated with IAM role for the 2048-game deployment.
    const serviceAccount = new KubeServiceAccount(
      this,
      props.serviceAccountName,
      {
        metadata: {
          name: props.serviceAccountName,
          namespace: namespace.name,
          annotations: {
            'eks.amazonaws.com/role-arn': props.iamRoleForK8sSaArn
          }
        }
      }
    );

    // For the situation when you need to define http_proxy env variables for your Pods.
    // const httpEnvConfigMap = new kplus.ConfigMap(this, 'k8s-cm-for-http-proxy-env', {
    //     metadata: {
    //         name: 'proxy-environment-variables',
    //         namespace: namespace.name,
    //     },
    //     data: {
    //         http_proxy: 'your-enterprise-proxy-server',
    //         https_proxy: 'your-enterprise-proxy-server',
    //         no_proxy: 'localhost,127.0.0.1,169.254.169.254,websites-should-not-be-accesses-via-proxy-in-your-environment'
    //     }
    // });

    const deployment = new kplus.Deployment(this, 'api-deployment', {
      containers: [
        {
          image: 'nginx',
          imagePullPolicy: kplus.ImagePullPolicy.ALWAYS,
          name: 'nginx',
          port: 80
          // env: {
          //     http_proxy: kplus.EnvValue.fromConfigMap(httpEnvConfigMap, 'http_proxy'),
          //     https_proxy: kplus.EnvValue.fromConfigMap(httpEnvConfigMap, 'https_proxy'),
          //     no_proxy: kplus.EnvValue.fromConfigMap(httpEnvConfigMap, 'no_proxy'),
          // }
        }
      ],
      metadata: {
        name: 'api-deployment',
        namespace: namespace.name
      },
      serviceAccount
    });

    deployment.podMetadata.addLabel('app', 'nginx');
    deployment.select(LabelSelector.of({ labels: { app: 'nginx' } }));

    const service = new kplus.Service(this, 'api-service', {
      metadata: {
        namespace: namespace.name,
        name: 'api-service',
        labels: {
          app: 'nginx'
        },
        annotations: {
          'alb.ingress.kubernetes.io/target-type': 'ip'
        }
      },
      type: kplus.ServiceType.NODE_PORT,
      ports: [{ port: 80 }]
    });

    const ingress = new kplus.Ingress(this, props.ingressName, {
      metadata: {
        name: props.ingressName,
        namespace: namespace.name,
        annotations: {
          'kubernetes.io/ingress.class': 'alb',
          'alb.ingress.kubernetes.io/scheme': 'internal', // Set ALB for K8S Ingress as internal-facing service.
          'alb.ingress.kubernetes.io/target-type': 'ip'
        },
        labels: { app: 'nginx' }
      },
      rules: [
        {
          backend: kplus.IngressBackend.fromService(service)
        }
      ]
    });

    deployment.exposeViaIngress('/*', { ingress });
  }
}
